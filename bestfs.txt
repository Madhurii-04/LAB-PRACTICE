#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_NODES 100  // Maximum number of nodes in the graph

// A utility function to find the node with the lowest heuristic value (greedy selection)
int findMinHeuristic(int heuristic[], bool visited[], int n) {
    int min = INT_MAX;
    int minIndex = -1;

    for (int i = 0; i < n; i++) {
        if (!visited[i] && heuristic[i] < min) {
            min = heuristic[i];
            minIndex = i;
        }
    }

    return minIndex;
}

// A utility function to print the path from start to goal
void printPath(int parent[], int goal) {
    if (parent[goal] == -1) {
        printf("%d ", goal);
        return;
    }
    printPath(parent, parent[goal]);
    printf("%d ", goal);
}

// Best First Search algorithm
void bestFirstSearch(int graph[MAX_NODES][MAX_NODES], int heuristics[MAX_NODES], int n, int start, int goal) {
    int parent[MAX_NODES];  // To store the path (parent array)
    bool visited[MAX_NODES];  // To mark visited nodes

    // Initialize all nodes
    for (int i = 0; i < n; i++) {
        visited[i] = false;
        parent[i] = -1;
    }

    // Start from the initial node
    visited[start] = true;
    int currentNode = start;

    while (currentNode != -1) {
        if (currentNode == goal) {
            printf("Path found: ");
            printPath(parent, goal);
            printf("\n");
            return;
        }

        // Explore neighbors of the current node
        for (int neighbor = 0; neighbor < n; neighbor++) {
            if (graph[currentNode][neighbor] && !visited[neighbor]) {
                visited[neighbor] = true;
                parent[neighbor] = currentNode;  // Set the parent for path tracing
            }
        }

        // Choose the next node with the minimum heuristic value
        currentNode = findMinHeuristic(heuristics, visited, n);
    }

    printf("No path found.\n");
}

int main() {
    int n, e;  // Number of nodes and edges
    int graph[MAX_NODES][MAX_NODES] = {0};  // Adjacency matrix
    int heuristics[MAX_NODES];  // Array to store heuristic values

    // Input the number of nodes and edges
    printf("Enter the number of nodes and edges: ");
    scanf("%d %d", &n, &e);

    // Input the edges
    printf("Enter the edges (u v) where u and v are nodes:\n");
    for (int i = 0; i < e; ++i) {
        int u, v;
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;  // Mark edge from u to v
        graph[v][u] = 1;  // Mark edge from v to u (undirected graph)
    }

    // Input the heuristic values for each node
    printf("Enter the heuristic values for each node:\n");
    for (int i = 0; i < n; i++) {
        printf("Heuristic value for node %d: ", i);
        scanf("%d", &heuristics[i]);
    }

    int start, goal;  // Starting and goal nodes
    printf("Enter the starting node for Best First Search: ");
    scanf("%d", &start);
    printf("Enter the goal node: ");
    scanf("%d", &goal);

    // Perform Best First Search
    bestFirstSearch(graph, heuristics, n, start, goal);

    return 0;
}
